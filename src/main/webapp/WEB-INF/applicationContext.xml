<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:mvc="http://www.springframework.org/schema/mvc"
       xmlns:aop="http://www.springframework.org/schema/aop"
       xmlns:tx="http://www.springframework.org/schema/tx"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
                        http://www.springframework.org/schema/beans/spring-beans-3.2.xsd
                        http://www.springframework.org/schema/context
                        http://www.springframework.org/schema/context/spring-context-3.2.xsd
                        http://www.springframework.org/schema/mvc
                        http://www.springframework.org/schema/mvc/spring-mvc.xsd
                        http://www.springframework.org/schema/tx
                        http://www.springframework.org/schema/tx/spring-tx.xsd
                         http://www.springframework.org/schema/aop
                         http://www.springframework.org/schema/aop/spring-aop.xsd">

    <bean class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">
        <property name="locations">
            <list>
                <value>classpath:jdbc.properties</value>
                <value>classpath:memcached.properties</value>
            </list>
        </property>
    </bean>

    <mvc:interceptors> <!-- SQL注入拦截-->
        <mvc:interceptor>
            <mvc:mapping path="/**"/>
            <bean class="com.rccf.model.beans.SqlInjectInterceptor"></bean>
        </mvc:interceptor>
    </mvc:interceptors>


    <!--启用spring的一些annotation -->
    <context:annotation-config/>

    <!-- 自动扫描该包，使SpringMVC认为包下用了@controller注解的类是控制器 -->
    <!--<context:component-scan base-package="com.rccf.userclient.controller" use-default-filters="false">-->
    <!--<context:include-filter type="annotation" expression="org.springframework.stereotype.Controller"/>-->
    <!--<context:include-filter type="annotation" expression="org.springframework.web.bind.annotation.ControllerAdvice"/>-->
    <!--</context:component-scan>-->
    <context:component-scan base-package="com.rccf"></context:component-scan>


    <!-- 配置注解驱动 可以将request参数与绑定到controller参数上 -->
    <mvc:annotation-driven/>

    <!-- 对模型视图名称的解析，即在模型视图名称添加前后缀(如果最后一个还是表示文件夹,则最后的斜杠不要漏了) 使用JSP-->

    <!-- springmvc文件上传需要配置的节点-->
    <bean id="multipartResolver" class="org.springframework.web.multipart.commons.CommonsMultipartResolver">
        <property name="maxUploadSize" value="20971500"/>
        <property name="defaultEncoding" value="UTF-8"/>
        <property name="resolveLazily" value="true"/>
    </bean>


    <!-- Memcached配置 -->
    <!--
       枚举类型要想注入到类中，一定要先使用org.springframework.beans.factory.config.FieldRetrievingFactoryBean类将枚举类型进行转换
       将DefaultHashAlgorithm.KETAMA_HASH转换为KETAMA_HASH这个bean，
       然后在要注入的bean中使用<property name="hashAlg" ref="KETAMA_HASH" />引用即可。
    -->
    <bean id="KETAMA_HASH" class="org.springframework.beans.factory.config.FieldRetrievingFactoryBean">
        <property name="staticField" value="net.spy.memcached.DefaultHashAlgorithm.KETAMA_HASH"/>
    </bean>

    <bean id="memcachedClient" class="net.spy.memcached.spring.MemcachedClientFactoryBean">
        <!-- 一个字符串，包括由空格或逗号分隔的主机或IP地址与端口号 -->
        <property name="servers" value="${memcached.servers}"/>
        <!-- 指定要使用的协议(BINARY,TEXT),默认是TEXT -->
        <property name="protocol" value="${memcached.protocol}"/>
        <!-- 设置默认的转码器(默认以net.spy.memcached.transcoders.SerializingTranscoder) -->
        <property name="transcoder">
            <bean class="net.spy.memcached.transcoders.SerializingTranscoder">
                <property name="compressionThreshold" value="1024"/>
            </bean>
        </property>
        <!-- 以毫秒为单位设置默认的操作超时时间 -->
        <property name="opTimeout" value="${memcached.opTimeout}"/>
        <property name="timeoutExceptionThreshold" value="${memcached.timeoutExceptionThreshold}"/>
        <!-- 设置哈希算法 -->
        <property name="hashAlg" ref="KETAMA_HASH"/>
        <!-- 设置定位器类型(ARRAY_MOD,CONSISTENT),默认是ARRAY_MOD -->
        <property name="locatorType" value="${memcached.locatorType}"/>
        <!-- 设置故障模式(取消，重新分配，重试)，默认是重新分配 -->
        <property name="failureMode" value="${memcached.failureMode}"/>
        <!-- 想使用Nagle算法，设置为true -->
        <property name="useNagleAlgorithm" value="${memcached.useNagleAlgorithm}"/>
    </bean>

    <bean id="Datasource" destroy-method="close" class="com.mchange.v2.c3p0.ComboPooledDataSource">
        <property name="driverClass" value="${driverClass}"/>
        <property name="jdbcUrl" value="${url}"/>
        <property name="user" value="${user}"/>
        <property name="password" value="${password}"/>
        <property name="initialPoolSize" value="${initialPoolSize}"/>
        <property name="minPoolSize" value="${minPoolSize}"/>
        <property name="maxPoolSize" value="${maxPoolSize}"/>
        <property name="maxIdleTime" value="${maxIdleTime}"/>

    </bean>
    <bean id="sessionFactory"
          class="org.springframework.orm.hibernate4.LocalSessionFactoryBean">
        <property name="dataSource" ref="Datasource"/>
        <!--<property name="namingStrategy">-->
        <!--<bean class="org.hibernate.cfg.ImprovedNamingStrategy"></bean>-->
        <!--</property>-->
        <property name="packagesToScan">
            <list>
                <value>com.rccf.model</value>
            </list>
        </property>
        <property name="hibernateProperties">
            <props>

                <prop key="hibernate.dialect">${dialect}</prop>
                <prop key="hibernate.show_sql">${show_sql}</prop>
                <prop key="hibernate.format_sql">${format_sql}</prop>
                <prop key="hibernate.hbm2ddl.auto">${hbm2ddl.auto}</prop>
                <prop key="hibernate.connection.url">jdbc:mysql://localhost:3306/rccf</prop>
                <prop key="hibernate.connection.driver_class">com.mysql.jdbc.Driver</prop>

                <prop key="hibernate.use_sql_commants">${use_sql_comments}</prop>
                <prop key="hibernate.hbm2ddl.auto">${hbm2ddl.auto}</prop>
                <prop key="autoCommitOnClose">${autoCommitOnClose}</prop>
                <prop key="connection.characterEncoding">${characterEncoding}</prop>
            </props>
        </property>
    </bean>

    <bean id="txManager"
          class="org.springframework.orm.hibernate4.HibernateTransactionManager">
        <property name="sessionFactory" ref="sessionFactory"/>

    </bean>

    <bean id="SpringContextUtil" class="com.rccf.util.SpringContextUtil" scope="singleton"></bean>

    <bean id="memcachedManager" class="com.rccf.component.SpyMemcachedManager">
        <property name="memcachedClient" ref="memcachedClient"/>
    </bean>

    <tx:advice id="txAdvice" transaction-manager="txManager">
        <tx:attributes>
            <tx:method name="get*" read-only="true"/>
            <tx:method name="*"/>
        </tx:attributes>
    </tx:advice>
    <aop:config>
        <aop:pointcut id="bizMethods" expression="execution(* com.rccf.service.*.*(..))"/>
        <aop:advisor advice-ref="txAdvice" pointcut-ref="bizMethods"/>
    </aop:config>


</beans>